//@ts-nocheck
// DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
import { gql } from "tinacms";
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: "SystemInfo";
  filename: Scalars["String"];
  basename: Scalars["String"];
  breadcrumbs: Array<Scalars["String"]>;
  path: Scalars["String"];
  relativePath: Scalars["String"];
  extension: Scalars["String"];
  template: Scalars["String"];
  collection: Collection;
};

export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars["Boolean"]>;
};

export type PageInfo = {
  __typename?: "PageInfo";
  hasPreviousPage: Scalars["Boolean"];
  hasNextPage: Scalars["Boolean"];
  startCursor: Scalars["String"];
  endCursor: Scalars["String"];
};

export type Node = {
  id: Scalars["ID"];
};

export type Document = {
  sys?: Maybe<SystemInfo>;
  id: Scalars["ID"];
  form: Scalars["JSON"];
  values: Scalars["JSON"];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars["Float"];
};

export type Query = {
  __typename?: "Query";
  getOptimizedQuery?: Maybe<Scalars["String"]>;
  getCollection: Collection;
  getCollections: Array<Collection>;
  node: Node;
  getDocument: DocumentNode;
  getDocumentList: DocumentConnection;
  getDocumentFields: Scalars["JSON"];
  getPostsDocument: PostsDocument;
  getPostsList: PostsConnection;
  getPagesDocument: PagesDocument;
  getPagesList: PagesConnection;
};

export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars["String"];
};

export type QueryGetCollectionArgs = {
  collection?: InputMaybe<Scalars["String"]>;
};

export type QueryNodeArgs = {
  id?: InputMaybe<Scalars["String"]>;
};

export type QueryGetDocumentArgs = {
  collection?: InputMaybe<Scalars["String"]>;
  relativePath?: InputMaybe<Scalars["String"]>;
};

export type QueryGetDocumentListArgs = {
  before?: InputMaybe<Scalars["String"]>;
  after?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Float"]>;
  last?: InputMaybe<Scalars["Float"]>;
  sort?: InputMaybe<Scalars["String"]>;
};

export type QueryGetPostsDocumentArgs = {
  relativePath?: InputMaybe<Scalars["String"]>;
};

export type QueryGetPostsListArgs = {
  before?: InputMaybe<Scalars["String"]>;
  after?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Float"]>;
  last?: InputMaybe<Scalars["Float"]>;
  sort?: InputMaybe<Scalars["String"]>;
};

export type QueryGetPagesDocumentArgs = {
  relativePath?: InputMaybe<Scalars["String"]>;
};

export type QueryGetPagesListArgs = {
  before?: InputMaybe<Scalars["String"]>;
  after?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Float"]>;
  last?: InputMaybe<Scalars["Float"]>;
  sort?: InputMaybe<Scalars["String"]>;
};

export type DocumentConnectionEdges = {
  __typename?: "DocumentConnectionEdges";
  cursor?: Maybe<Scalars["String"]>;
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: "DocumentConnection";
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars["Float"];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: "Collection";
  name: Scalars["String"];
  slug: Scalars["String"];
  label?: Maybe<Scalars["String"]>;
  path: Scalars["String"];
  format?: Maybe<Scalars["String"]>;
  matches?: Maybe<Scalars["String"]>;
  templates?: Maybe<Array<Maybe<Scalars["JSON"]>>>;
  fields?: Maybe<Array<Maybe<Scalars["JSON"]>>>;
  documents: DocumentConnection;
};

export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars["String"]>;
  after?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Float"]>;
  last?: InputMaybe<Scalars["Float"]>;
  sort?: InputMaybe<Scalars["String"]>;
};

export type DocumentNode = PostsDocument | PagesDocument;

export type Posts = {
  __typename?: "Posts";
  title?: Maybe<Scalars["String"]>;
  body?: Maybe<Scalars["String"]>;
};

export type PostsDocument = Node &
  Document & {
    __typename?: "PostsDocument";
    id: Scalars["ID"];
    sys: SystemInfo;
    data: Posts;
    form: Scalars["JSON"];
    values: Scalars["JSON"];
    dataJSON: Scalars["JSON"];
  };

export type PostsConnectionEdges = {
  __typename?: "PostsConnectionEdges";
  cursor?: Maybe<Scalars["String"]>;
  node?: Maybe<PostsDocument>;
};

export type PostsConnection = Connection & {
  __typename?: "PostsConnection";
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars["Float"];
  edges?: Maybe<Array<Maybe<PostsConnectionEdges>>>;
};

export type Pages = {
  __typename?: "Pages";
  title?: Maybe<Scalars["String"]>;
  updatedAt?: Maybe<Scalars["String"]>;
  body?: Maybe<Scalars["JSON"]>;
};

export type PagesDocument = Node &
  Document & {
    __typename?: "PagesDocument";
    id: Scalars["ID"];
    sys: SystemInfo;
    data: Pages;
    form: Scalars["JSON"];
    values: Scalars["JSON"];
    dataJSON: Scalars["JSON"];
  };

export type PagesConnectionEdges = {
  __typename?: "PagesConnectionEdges";
  cursor?: Maybe<Scalars["String"]>;
  node?: Maybe<PagesDocument>;
};

export type PagesConnection = Connection & {
  __typename?: "PagesConnection";
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars["Float"];
  edges?: Maybe<Array<Maybe<PagesConnectionEdges>>>;
};

export type Mutation = {
  __typename?: "Mutation";
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  createDocument: DocumentNode;
  updatePostsDocument: PostsDocument;
  createPostsDocument: PostsDocument;
  updatePagesDocument: PagesDocument;
  createPagesDocument: PagesDocument;
};

export type MutationAddPendingDocumentArgs = {
  collection: Scalars["String"];
  relativePath: Scalars["String"];
  template?: InputMaybe<Scalars["String"]>;
};

export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars["String"]>;
  relativePath: Scalars["String"];
  params: DocumentMutation;
};

export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars["String"]>;
  relativePath: Scalars["String"];
  params: DocumentMutation;
};

export type MutationUpdatePostsDocumentArgs = {
  relativePath: Scalars["String"];
  params: PostsMutation;
};

export type MutationCreatePostsDocumentArgs = {
  relativePath: Scalars["String"];
  params: PostsMutation;
};

export type MutationUpdatePagesDocumentArgs = {
  relativePath: Scalars["String"];
  params: PagesMutation;
};

export type MutationCreatePagesDocumentArgs = {
  relativePath: Scalars["String"];
  params: PagesMutation;
};

export type DocumentMutation = {
  posts?: InputMaybe<PostsMutation>;
  pages?: InputMaybe<PagesMutation>;
};

export type PostsMutation = {
  title?: InputMaybe<Scalars["String"]>;
  body?: InputMaybe<Scalars["String"]>;
};

export type PagesMutation = {
  title?: InputMaybe<Scalars["String"]>;
  updatedAt?: InputMaybe<Scalars["String"]>;
  body?: InputMaybe<Scalars["JSON"]>;
};

export type PostsPartsFragment = {
  __typename?: "Posts";
  title?: string | null;
  body?: string | null;
};

export type PagesPartsFragment = {
  __typename?: "Pages";
  title?: string | null;
  updatedAt?: string | null;
  body?: any | null;
};

export type GetPostsDocumentQueryVariables = Exact<{
  relativePath: Scalars["String"];
}>;

export type GetPostsDocumentQuery = {
  __typename?: "Query";
  getPostsDocument: {
    __typename?: "PostsDocument";
    id: string;
    sys: {
      __typename?: "SystemInfo";
      filename: string;
      basename: string;
      breadcrumbs: Array<string>;
      path: string;
      relativePath: string;
      extension: string;
    };
    data: { __typename?: "Posts"; title?: string | null; body?: string | null };
  };
};

export type GetPostsListQueryVariables = Exact<{ [key: string]: never }>;

export type GetPostsListQuery = {
  __typename?: "Query";
  getPostsList: {
    __typename?: "PostsConnection";
    totalCount: number;
    edges?: Array<{
      __typename?: "PostsConnectionEdges";
      node?: {
        __typename?: "PostsDocument";
        id: string;
        sys: {
          __typename?: "SystemInfo";
          filename: string;
          basename: string;
          breadcrumbs: Array<string>;
          path: string;
          relativePath: string;
          extension: string;
        };
        data: {
          __typename?: "Posts";
          title?: string | null;
          body?: string | null;
        };
      } | null;
    } | null> | null;
  };
};

export type GetPagesDocumentQueryVariables = Exact<{
  relativePath: Scalars["String"];
}>;

export type GetPagesDocumentQuery = {
  __typename?: "Query";
  getPagesDocument: {
    __typename?: "PagesDocument";
    id: string;
    sys: {
      __typename?: "SystemInfo";
      filename: string;
      basename: string;
      breadcrumbs: Array<string>;
      path: string;
      relativePath: string;
      extension: string;
    };
    data: {
      __typename?: "Pages";
      title?: string | null;
      updatedAt?: string | null;
      body?: any | null;
    };
  };
};

export type GetPagesListQueryVariables = Exact<{ [key: string]: never }>;

export type GetPagesListQuery = {
  __typename?: "Query";
  getPagesList: {
    __typename?: "PagesConnection";
    totalCount: number;
    edges?: Array<{
      __typename?: "PagesConnectionEdges";
      node?: {
        __typename?: "PagesDocument";
        id: string;
        sys: {
          __typename?: "SystemInfo";
          filename: string;
          basename: string;
          breadcrumbs: Array<string>;
          path: string;
          relativePath: string;
          extension: string;
        };
        data: {
          __typename?: "Pages";
          title?: string | null;
          updatedAt?: string | null;
          body?: any | null;
        };
      } | null;
    } | null> | null;
  };
};

export const PostsPartsFragmentDoc = gql`
  fragment PostsParts on Posts {
    title
    body
  }
`;
export const PagesPartsFragmentDoc = gql`
  fragment PagesParts on Pages {
    title
    updatedAt
    body
  }
`;
export const GetPostsDocumentDocument = gql`
  query getPostsDocument($relativePath: String!) {
    getPostsDocument(relativePath: $relativePath) {
      sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
      data {
        ...PostsParts
      }
    }
  }
  ${PostsPartsFragmentDoc}
`;
export const GetPostsListDocument = gql`
  query getPostsList {
    getPostsList {
      totalCount
      edges {
        node {
          id
          sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          data {
            ...PostsParts
          }
        }
      }
    }
  }
  ${PostsPartsFragmentDoc}
`;
export const GetPagesDocumentDocument = gql`
  query getPagesDocument($relativePath: String!) {
    getPagesDocument(relativePath: $relativePath) {
      sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
      data {
        ...PagesParts
      }
    }
  }
  ${PagesPartsFragmentDoc}
`;
export const GetPagesListDocument = gql`
  query getPagesList {
    getPagesList {
      totalCount
      edges {
        node {
          id
          sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          data {
            ...PagesParts
          }
        }
      }
    }
  }
  ${PagesPartsFragmentDoc}
`;
export type Requester<C = {}> = <R, V>(
  doc: DocumentNode,
  vars?: V,
  options?: C
) => Promise<R>;
export function getSdk<C>(requester: Requester<C>) {
  return {
    getPostsDocument(
      variables: GetPostsDocumentQueryVariables,
      options?: C
    ): Promise<{
      data: GetPostsDocumentQuery;
      variables: GetPostsDocumentQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: GetPostsDocumentQuery;
          variables: GetPostsDocumentQueryVariables;
          query: string;
        },
        GetPostsDocumentQueryVariables
      >(GetPostsDocumentDocument, variables, options);
    },
    getPostsList(
      variables?: GetPostsListQueryVariables,
      options?: C
    ): Promise<{
      data: GetPostsListQuery;
      variables: GetPostsListQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: GetPostsListQuery;
          variables: GetPostsListQueryVariables;
          query: string;
        },
        GetPostsListQueryVariables
      >(GetPostsListDocument, variables, options);
    },
    getPagesDocument(
      variables: GetPagesDocumentQueryVariables,
      options?: C
    ): Promise<{
      data: GetPagesDocumentQuery;
      variables: GetPagesDocumentQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: GetPagesDocumentQuery;
          variables: GetPagesDocumentQueryVariables;
          query: string;
        },
        GetPagesDocumentQueryVariables
      >(GetPagesDocumentDocument, variables, options);
    },
    getPagesList(
      variables?: GetPagesListQueryVariables,
      options?: C
    ): Promise<{
      data: GetPagesListQuery;
      variables: GetPagesListQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: GetPagesListQuery;
          variables: GetPagesListQueryVariables;
          query: string;
        },
        GetPagesListQueryVariables
      >(GetPagesListDocument, variables, options);
    },
  };
}
export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { staticRequest } from "tinacms";
const requester: (doc: any, vars?: any, options?: any) => Promise<any> = async (
  doc,
  vars,
  _options
) => {
  let data = {};
  try {
    data = await staticRequest({
      query: doc,
      variables: vars,
    });
  } catch (e) {
    // swallow errors related to document creation
    console.warn("Warning: There was an error when fetching data");
    console.warn(e);
  }

  return { data, query: doc, variables: vars || {} };
};

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () => getSdk(requester);
