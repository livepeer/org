//@ts-nocheck
// DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
import { gql } from "tinacms";
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** References another document, used as a foreign key */
  Reference: any;
  JSON: any;
};

export type SystemInfo = {
  __typename?: "SystemInfo";
  filename: Scalars["String"];
  basename: Scalars["String"];
  breadcrumbs: Array<Scalars["String"]>;
  path: Scalars["String"];
  relativePath: Scalars["String"];
  extension: Scalars["String"];
  template: Scalars["String"];
  collection: Collection;
};

export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars["Boolean"]>;
};

export type PageInfo = {
  __typename?: "PageInfo";
  hasPreviousPage: Scalars["Boolean"];
  hasNextPage: Scalars["Boolean"];
  startCursor: Scalars["String"];
  endCursor: Scalars["String"];
};

export type Node = {
  id: Scalars["ID"];
};

export type Document = {
  sys?: Maybe<SystemInfo>;
  id: Scalars["ID"];
  form: Scalars["JSON"];
  values: Scalars["JSON"];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars["Float"];
};

export type Query = {
  __typename?: "Query";
  getOptimizedQuery?: Maybe<Scalars["String"]>;
  getCollection: Collection;
  getCollections: Array<Collection>;
  node: Node;
  getDocument: DocumentNode;
  getDocumentList: DocumentConnection;
  getDocumentFields: Scalars["JSON"];
  getPostsDocument: PostsDocument;
  getPostsList: PostsConnection;
  getAppsDocument: AppsDocument;
  getAppsList: AppsConnection;
  getVideosDocument: VideosDocument;
  getVideosList: VideosConnection;
  getWeb3Document: Web3Document;
  getWeb3List: Web3Connection;
  getStakingDocument: StakingDocument;
  getStakingList: StakingConnection;
  getExchangeDocument: ExchangeDocument;
  getExchangeList: ExchangeConnection;
  getComunityDocument: ComunityDocument;
  getComunityList: ComunityConnection;
  getPagesDocument: PagesDocument;
  getPagesList: PagesConnection;
};

export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars["String"];
};

export type QueryGetCollectionArgs = {
  collection?: InputMaybe<Scalars["String"]>;
};

export type QueryNodeArgs = {
  id?: InputMaybe<Scalars["String"]>;
};

export type QueryGetDocumentArgs = {
  collection?: InputMaybe<Scalars["String"]>;
  relativePath?: InputMaybe<Scalars["String"]>;
};

export type QueryGetDocumentListArgs = {
  before?: InputMaybe<Scalars["String"]>;
  after?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Float"]>;
  last?: InputMaybe<Scalars["Float"]>;
  sort?: InputMaybe<Scalars["String"]>;
};

export type QueryGetPostsDocumentArgs = {
  relativePath?: InputMaybe<Scalars["String"]>;
};

export type QueryGetPostsListArgs = {
  before?: InputMaybe<Scalars["String"]>;
  after?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Float"]>;
  last?: InputMaybe<Scalars["Float"]>;
  sort?: InputMaybe<Scalars["String"]>;
};

export type QueryGetAppsDocumentArgs = {
  relativePath?: InputMaybe<Scalars["String"]>;
};

export type QueryGetAppsListArgs = {
  before?: InputMaybe<Scalars["String"]>;
  after?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Float"]>;
  last?: InputMaybe<Scalars["Float"]>;
  sort?: InputMaybe<Scalars["String"]>;
};

export type QueryGetVideosDocumentArgs = {
  relativePath?: InputMaybe<Scalars["String"]>;
};

export type QueryGetVideosListArgs = {
  before?: InputMaybe<Scalars["String"]>;
  after?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Float"]>;
  last?: InputMaybe<Scalars["Float"]>;
  sort?: InputMaybe<Scalars["String"]>;
};

export type QueryGetWeb3DocumentArgs = {
  relativePath?: InputMaybe<Scalars["String"]>;
};

export type QueryGetWeb3ListArgs = {
  before?: InputMaybe<Scalars["String"]>;
  after?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Float"]>;
  last?: InputMaybe<Scalars["Float"]>;
  sort?: InputMaybe<Scalars["String"]>;
};

export type QueryGetStakingDocumentArgs = {
  relativePath?: InputMaybe<Scalars["String"]>;
};

export type QueryGetStakingListArgs = {
  before?: InputMaybe<Scalars["String"]>;
  after?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Float"]>;
  last?: InputMaybe<Scalars["Float"]>;
  sort?: InputMaybe<Scalars["String"]>;
};

export type QueryGetExchangeDocumentArgs = {
  relativePath?: InputMaybe<Scalars["String"]>;
};

export type QueryGetExchangeListArgs = {
  before?: InputMaybe<Scalars["String"]>;
  after?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Float"]>;
  last?: InputMaybe<Scalars["Float"]>;
  sort?: InputMaybe<Scalars["String"]>;
};

export type QueryGetComunityDocumentArgs = {
  relativePath?: InputMaybe<Scalars["String"]>;
};

export type QueryGetComunityListArgs = {
  before?: InputMaybe<Scalars["String"]>;
  after?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Float"]>;
  last?: InputMaybe<Scalars["Float"]>;
  sort?: InputMaybe<Scalars["String"]>;
};

export type QueryGetPagesDocumentArgs = {
  relativePath?: InputMaybe<Scalars["String"]>;
};

export type QueryGetPagesListArgs = {
  before?: InputMaybe<Scalars["String"]>;
  after?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Float"]>;
  last?: InputMaybe<Scalars["Float"]>;
  sort?: InputMaybe<Scalars["String"]>;
};

export type DocumentConnectionEdges = {
  __typename?: "DocumentConnectionEdges";
  cursor?: Maybe<Scalars["String"]>;
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: "DocumentConnection";
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars["Float"];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: "Collection";
  name: Scalars["String"];
  slug: Scalars["String"];
  label?: Maybe<Scalars["String"]>;
  path: Scalars["String"];
  format?: Maybe<Scalars["String"]>;
  matches?: Maybe<Scalars["String"]>;
  templates?: Maybe<Array<Maybe<Scalars["JSON"]>>>;
  fields?: Maybe<Array<Maybe<Scalars["JSON"]>>>;
  documents: DocumentConnection;
};

export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars["String"]>;
  after?: InputMaybe<Scalars["String"]>;
  first?: InputMaybe<Scalars["Float"]>;
  last?: InputMaybe<Scalars["Float"]>;
  sort?: InputMaybe<Scalars["String"]>;
};

export type DocumentNode =
  | PostsDocument
  | AppsDocument
  | VideosDocument
  | Web3Document
  | StakingDocument
  | ExchangeDocument
  | ComunityDocument
  | PagesDocument;

export type Posts = {
  __typename?: "Posts";
  title?: Maybe<Scalars["String"]>;
  body?: Maybe<Scalars["String"]>;
};

export type PostsDocument = Node &
  Document & {
    __typename?: "PostsDocument";
    id: Scalars["ID"];
    sys: SystemInfo;
    data: Posts;
    form: Scalars["JSON"];
    values: Scalars["JSON"];
    dataJSON: Scalars["JSON"];
  };

export type PostsConnectionEdges = {
  __typename?: "PostsConnectionEdges";
  cursor?: Maybe<Scalars["String"]>;
  node?: Maybe<PostsDocument>;
};

export type PostsConnection = Connection & {
  __typename?: "PostsConnection";
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars["Float"];
  edges?: Maybe<Array<Maybe<PostsConnectionEdges>>>;
};

export type Apps = {
  __typename?: "Apps";
  image?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  richtext?: Maybe<Scalars["JSON"]>;
  website?: Maybe<Scalars["String"]>;
  twitter?: Maybe<Scalars["String"]>;
  discord?: Maybe<Scalars["String"]>;
  linkedin?: Maybe<Scalars["String"]>;
};

export type AppsDocument = Node &
  Document & {
    __typename?: "AppsDocument";
    id: Scalars["ID"];
    sys: SystemInfo;
    data: Apps;
    form: Scalars["JSON"];
    values: Scalars["JSON"];
    dataJSON: Scalars["JSON"];
  };

export type AppsConnectionEdges = {
  __typename?: "AppsConnectionEdges";
  cursor?: Maybe<Scalars["String"]>;
  node?: Maybe<AppsDocument>;
};

export type AppsConnection = Connection & {
  __typename?: "AppsConnection";
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars["Float"];
  edges?: Maybe<Array<Maybe<AppsConnectionEdges>>>;
};

export type Videos = {
  __typename?: "Videos";
  image?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  richtext?: Maybe<Scalars["JSON"]>;
  website?: Maybe<Scalars["String"]>;
};

export type VideosDocument = Node &
  Document & {
    __typename?: "VideosDocument";
    id: Scalars["ID"];
    sys: SystemInfo;
    data: Videos;
    form: Scalars["JSON"];
    values: Scalars["JSON"];
    dataJSON: Scalars["JSON"];
  };

export type VideosConnectionEdges = {
  __typename?: "VideosConnectionEdges";
  cursor?: Maybe<Scalars["String"]>;
  node?: Maybe<VideosDocument>;
};

export type VideosConnection = Connection & {
  __typename?: "VideosConnection";
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars["Float"];
  edges?: Maybe<Array<Maybe<VideosConnectionEdges>>>;
};

export type Web3 = {
  __typename?: "Web3";
  image?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  richtext?: Maybe<Scalars["JSON"]>;
  website?: Maybe<Scalars["String"]>;
};

export type Web3Document = Node &
  Document & {
    __typename?: "Web3Document";
    id: Scalars["ID"];
    sys: SystemInfo;
    data: Web3;
    form: Scalars["JSON"];
    values: Scalars["JSON"];
    dataJSON: Scalars["JSON"];
  };

export type Web3ConnectionEdges = {
  __typename?: "Web3ConnectionEdges";
  cursor?: Maybe<Scalars["String"]>;
  node?: Maybe<Web3Document>;
};

export type Web3Connection = Connection & {
  __typename?: "Web3Connection";
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars["Float"];
  edges?: Maybe<Array<Maybe<Web3ConnectionEdges>>>;
};

export type Staking = {
  __typename?: "Staking";
  image?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  richtext?: Maybe<Scalars["JSON"]>;
  website?: Maybe<Scalars["String"]>;
  twitter?: Maybe<Scalars["String"]>;
};

export type StakingDocument = Node &
  Document & {
    __typename?: "StakingDocument";
    id: Scalars["ID"];
    sys: SystemInfo;
    data: Staking;
    form: Scalars["JSON"];
    values: Scalars["JSON"];
    dataJSON: Scalars["JSON"];
  };

export type StakingConnectionEdges = {
  __typename?: "StakingConnectionEdges";
  cursor?: Maybe<Scalars["String"]>;
  node?: Maybe<StakingDocument>;
};

export type StakingConnection = Connection & {
  __typename?: "StakingConnection";
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars["Float"];
  edges?: Maybe<Array<Maybe<StakingConnectionEdges>>>;
};

export type Exchange = {
  __typename?: "Exchange";
  image?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  richtext?: Maybe<Scalars["JSON"]>;
  website?: Maybe<Scalars["String"]>;
  twitter?: Maybe<Scalars["String"]>;
  telegram?: Maybe<Scalars["String"]>;
};

export type ExchangeDocument = Node &
  Document & {
    __typename?: "ExchangeDocument";
    id: Scalars["ID"];
    sys: SystemInfo;
    data: Exchange;
    form: Scalars["JSON"];
    values: Scalars["JSON"];
    dataJSON: Scalars["JSON"];
  };

export type ExchangeConnectionEdges = {
  __typename?: "ExchangeConnectionEdges";
  cursor?: Maybe<Scalars["String"]>;
  node?: Maybe<ExchangeDocument>;
};

export type ExchangeConnection = Connection & {
  __typename?: "ExchangeConnection";
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars["Float"];
  edges?: Maybe<Array<Maybe<ExchangeConnectionEdges>>>;
};

export type Comunity = {
  __typename?: "Comunity";
  image?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  richtext?: Maybe<Scalars["JSON"]>;
  website?: Maybe<Scalars["String"]>;
};

export type ComunityDocument = Node &
  Document & {
    __typename?: "ComunityDocument";
    id: Scalars["ID"];
    sys: SystemInfo;
    data: Comunity;
    form: Scalars["JSON"];
    values: Scalars["JSON"];
    dataJSON: Scalars["JSON"];
  };

export type ComunityConnectionEdges = {
  __typename?: "ComunityConnectionEdges";
  cursor?: Maybe<Scalars["String"]>;
  node?: Maybe<ComunityDocument>;
};

export type ComunityConnection = Connection & {
  __typename?: "ComunityConnection";
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars["Float"];
  edges?: Maybe<Array<Maybe<ComunityConnectionEdges>>>;
};

export type Pages = {
  __typename?: "Pages";
  title?: Maybe<Scalars["String"]>;
  updatedAt?: Maybe<Scalars["String"]>;
  body?: Maybe<Scalars["JSON"]>;
};

export type PagesDocument = Node &
  Document & {
    __typename?: "PagesDocument";
    id: Scalars["ID"];
    sys: SystemInfo;
    data: Pages;
    form: Scalars["JSON"];
    values: Scalars["JSON"];
    dataJSON: Scalars["JSON"];
  };

export type PagesConnectionEdges = {
  __typename?: "PagesConnectionEdges";
  cursor?: Maybe<Scalars["String"]>;
  node?: Maybe<PagesDocument>;
};

export type PagesConnection = Connection & {
  __typename?: "PagesConnection";
  pageInfo?: Maybe<PageInfo>;
  totalCount: Scalars["Float"];
  edges?: Maybe<Array<Maybe<PagesConnectionEdges>>>;
};

export type Mutation = {
  __typename?: "Mutation";
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  createDocument: DocumentNode;
  updatePostsDocument: PostsDocument;
  createPostsDocument: PostsDocument;
  updateAppsDocument: AppsDocument;
  createAppsDocument: AppsDocument;
  updateVideosDocument: VideosDocument;
  createVideosDocument: VideosDocument;
  updateWeb3Document: Web3Document;
  createWeb3Document: Web3Document;
  updateStakingDocument: StakingDocument;
  createStakingDocument: StakingDocument;
  updateExchangeDocument: ExchangeDocument;
  createExchangeDocument: ExchangeDocument;
  updateComunityDocument: ComunityDocument;
  createComunityDocument: ComunityDocument;
  updatePagesDocument: PagesDocument;
  createPagesDocument: PagesDocument;
};

export type MutationAddPendingDocumentArgs = {
  collection: Scalars["String"];
  relativePath: Scalars["String"];
  template?: InputMaybe<Scalars["String"]>;
};

export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars["String"]>;
  relativePath: Scalars["String"];
  params: DocumentMutation;
};

export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars["String"]>;
  relativePath: Scalars["String"];
  params: DocumentMutation;
};

export type MutationUpdatePostsDocumentArgs = {
  relativePath: Scalars["String"];
  params: PostsMutation;
};

export type MutationCreatePostsDocumentArgs = {
  relativePath: Scalars["String"];
  params: PostsMutation;
};

export type MutationUpdateAppsDocumentArgs = {
  relativePath: Scalars["String"];
  params: AppsMutation;
};

export type MutationCreateAppsDocumentArgs = {
  relativePath: Scalars["String"];
  params: AppsMutation;
};

export type MutationUpdateVideosDocumentArgs = {
  relativePath: Scalars["String"];
  params: VideosMutation;
};

export type MutationCreateVideosDocumentArgs = {
  relativePath: Scalars["String"];
  params: VideosMutation;
};

export type MutationUpdateWeb3DocumentArgs = {
  relativePath: Scalars["String"];
  params: Web3Mutation;
};

export type MutationCreateWeb3DocumentArgs = {
  relativePath: Scalars["String"];
  params: Web3Mutation;
};

export type MutationUpdateStakingDocumentArgs = {
  relativePath: Scalars["String"];
  params: StakingMutation;
};

export type MutationCreateStakingDocumentArgs = {
  relativePath: Scalars["String"];
  params: StakingMutation;
};

export type MutationUpdateExchangeDocumentArgs = {
  relativePath: Scalars["String"];
  params: ExchangeMutation;
};

export type MutationCreateExchangeDocumentArgs = {
  relativePath: Scalars["String"];
  params: ExchangeMutation;
};

export type MutationUpdateComunityDocumentArgs = {
  relativePath: Scalars["String"];
  params: ComunityMutation;
};

export type MutationCreateComunityDocumentArgs = {
  relativePath: Scalars["String"];
  params: ComunityMutation;
};

export type MutationUpdatePagesDocumentArgs = {
  relativePath: Scalars["String"];
  params: PagesMutation;
};

export type MutationCreatePagesDocumentArgs = {
  relativePath: Scalars["String"];
  params: PagesMutation;
};

export type DocumentMutation = {
  posts?: InputMaybe<PostsMutation>;
  apps?: InputMaybe<AppsMutation>;
  videos?: InputMaybe<VideosMutation>;
  web3?: InputMaybe<Web3Mutation>;
  staking?: InputMaybe<StakingMutation>;
  exchange?: InputMaybe<ExchangeMutation>;
  comunity?: InputMaybe<ComunityMutation>;
  pages?: InputMaybe<PagesMutation>;
};

export type PostsMutation = {
  title?: InputMaybe<Scalars["String"]>;
  body?: InputMaybe<Scalars["String"]>;
};

export type AppsMutation = {
  image?: InputMaybe<Scalars["String"]>;
  title?: InputMaybe<Scalars["String"]>;
  richtext?: InputMaybe<Scalars["JSON"]>;
  website?: InputMaybe<Scalars["String"]>;
  twitter?: InputMaybe<Scalars["String"]>;
  discord?: InputMaybe<Scalars["String"]>;
  linkedin?: InputMaybe<Scalars["String"]>;
};

export type VideosMutation = {
  image?: InputMaybe<Scalars["String"]>;
  title?: InputMaybe<Scalars["String"]>;
  richtext?: InputMaybe<Scalars["JSON"]>;
  website?: InputMaybe<Scalars["String"]>;
};

export type Web3Mutation = {
  image?: InputMaybe<Scalars["String"]>;
  title?: InputMaybe<Scalars["String"]>;
  richtext?: InputMaybe<Scalars["JSON"]>;
  website?: InputMaybe<Scalars["String"]>;
};

export type StakingMutation = {
  image?: InputMaybe<Scalars["String"]>;
  title?: InputMaybe<Scalars["String"]>;
  richtext?: InputMaybe<Scalars["JSON"]>;
  website?: InputMaybe<Scalars["String"]>;
  twitter?: InputMaybe<Scalars["String"]>;
};

export type ExchangeMutation = {
  image?: InputMaybe<Scalars["String"]>;
  title?: InputMaybe<Scalars["String"]>;
  richtext?: InputMaybe<Scalars["JSON"]>;
  website?: InputMaybe<Scalars["String"]>;
  twitter?: InputMaybe<Scalars["String"]>;
  telegram?: InputMaybe<Scalars["String"]>;
};

export type ComunityMutation = {
  image?: InputMaybe<Scalars["String"]>;
  title?: InputMaybe<Scalars["String"]>;
  richtext?: InputMaybe<Scalars["JSON"]>;
  website?: InputMaybe<Scalars["String"]>;
};

export type PagesMutation = {
  title?: InputMaybe<Scalars["String"]>;
  updatedAt?: InputMaybe<Scalars["String"]>;
  body?: InputMaybe<Scalars["JSON"]>;
};

export type PostsPartsFragment = {
  __typename?: "Posts";
  title?: string | null;
  body?: string | null;
};

export type AppsPartsFragment = {
  __typename?: "Apps";
  image?: string | null;
  title?: string | null;
  richtext?: any | null;
  website?: string | null;
  twitter?: string | null;
  discord?: string | null;
  linkedin?: string | null;
};

export type VideosPartsFragment = {
  __typename?: "Videos";
  image?: string | null;
  title?: string | null;
  richtext?: any | null;
  website?: string | null;
};

export type Web3PartsFragment = {
  __typename?: "Web3";
  image?: string | null;
  title?: string | null;
  richtext?: any | null;
  website?: string | null;
};

export type StakingPartsFragment = {
  __typename?: "Staking";
  image?: string | null;
  title?: string | null;
  richtext?: any | null;
  website?: string | null;
  twitter?: string | null;
};

export type ExchangePartsFragment = {
  __typename?: "Exchange";
  image?: string | null;
  title?: string | null;
  richtext?: any | null;
  website?: string | null;
  twitter?: string | null;
  telegram?: string | null;
};

export type ComunityPartsFragment = {
  __typename?: "Comunity";
  image?: string | null;
  title?: string | null;
  richtext?: any | null;
  website?: string | null;
};

export type PagesPartsFragment = {
  __typename?: "Pages";
  title?: string | null;
  updatedAt?: string | null;
  body?: any | null;
};

export type GetPostsDocumentQueryVariables = Exact<{
  relativePath: Scalars["String"];
}>;

export type GetPostsDocumentQuery = {
  __typename?: "Query";
  getPostsDocument: {
    __typename?: "PostsDocument";
    id: string;
    sys: {
      __typename?: "SystemInfo";
      filename: string;
      basename: string;
      breadcrumbs: Array<string>;
      path: string;
      relativePath: string;
      extension: string;
    };
    data: { __typename?: "Posts"; title?: string | null; body?: string | null };
  };
};

export type GetPostsListQueryVariables = Exact<{ [key: string]: never }>;

export type GetPostsListQuery = {
  __typename?: "Query";
  getPostsList: {
    __typename?: "PostsConnection";
    totalCount: number;
    edges?: Array<{
      __typename?: "PostsConnectionEdges";
      node?: {
        __typename?: "PostsDocument";
        id: string;
        sys: {
          __typename?: "SystemInfo";
          filename: string;
          basename: string;
          breadcrumbs: Array<string>;
          path: string;
          relativePath: string;
          extension: string;
        };
        data: {
          __typename?: "Posts";
          title?: string | null;
          body?: string | null;
        };
      } | null;
    } | null> | null;
  };
};

export type GetAppsDocumentQueryVariables = Exact<{
  relativePath: Scalars["String"];
}>;

export type GetAppsDocumentQuery = {
  __typename?: "Query";
  getAppsDocument: {
    __typename?: "AppsDocument";
    id: string;
    sys: {
      __typename?: "SystemInfo";
      filename: string;
      basename: string;
      breadcrumbs: Array<string>;
      path: string;
      relativePath: string;
      extension: string;
    };
    data: {
      __typename?: "Apps";
      image?: string | null;
      title?: string | null;
      richtext?: any | null;
      website?: string | null;
      twitter?: string | null;
      discord?: string | null;
      linkedin?: string | null;
    };
  };
};

export type GetAppsListQueryVariables = Exact<{ [key: string]: never }>;

export type GetAppsListQuery = {
  __typename?: "Query";
  getAppsList: {
    __typename?: "AppsConnection";
    totalCount: number;
    edges?: Array<{
      __typename?: "AppsConnectionEdges";
      node?: {
        __typename?: "AppsDocument";
        id: string;
        sys: {
          __typename?: "SystemInfo";
          filename: string;
          basename: string;
          breadcrumbs: Array<string>;
          path: string;
          relativePath: string;
          extension: string;
        };
        data: {
          __typename?: "Apps";
          image?: string | null;
          title?: string | null;
          richtext?: any | null;
          website?: string | null;
          twitter?: string | null;
          discord?: string | null;
          linkedin?: string | null;
        };
      } | null;
    } | null> | null;
  };
};

export type GetVideosDocumentQueryVariables = Exact<{
  relativePath: Scalars["String"];
}>;

export type GetVideosDocumentQuery = {
  __typename?: "Query";
  getVideosDocument: {
    __typename?: "VideosDocument";
    id: string;
    sys: {
      __typename?: "SystemInfo";
      filename: string;
      basename: string;
      breadcrumbs: Array<string>;
      path: string;
      relativePath: string;
      extension: string;
    };
    data: {
      __typename?: "Videos";
      image?: string | null;
      title?: string | null;
      richtext?: any | null;
      website?: string | null;
    };
  };
};

export type GetVideosListQueryVariables = Exact<{ [key: string]: never }>;

export type GetVideosListQuery = {
  __typename?: "Query";
  getVideosList: {
    __typename?: "VideosConnection";
    totalCount: number;
    edges?: Array<{
      __typename?: "VideosConnectionEdges";
      node?: {
        __typename?: "VideosDocument";
        id: string;
        sys: {
          __typename?: "SystemInfo";
          filename: string;
          basename: string;
          breadcrumbs: Array<string>;
          path: string;
          relativePath: string;
          extension: string;
        };
        data: {
          __typename?: "Videos";
          image?: string | null;
          title?: string | null;
          richtext?: any | null;
          website?: string | null;
        };
      } | null;
    } | null> | null;
  };
};

export type GetWeb3DocumentQueryVariables = Exact<{
  relativePath: Scalars["String"];
}>;

export type GetWeb3DocumentQuery = {
  __typename?: "Query";
  getWeb3Document: {
    __typename?: "Web3Document";
    id: string;
    sys: {
      __typename?: "SystemInfo";
      filename: string;
      basename: string;
      breadcrumbs: Array<string>;
      path: string;
      relativePath: string;
      extension: string;
    };
    data: {
      __typename?: "Web3";
      image?: string | null;
      title?: string | null;
      richtext?: any | null;
      website?: string | null;
    };
  };
};

export type GetWeb3ListQueryVariables = Exact<{ [key: string]: never }>;

export type GetWeb3ListQuery = {
  __typename?: "Query";
  getWeb3List: {
    __typename?: "Web3Connection";
    totalCount: number;
    edges?: Array<{
      __typename?: "Web3ConnectionEdges";
      node?: {
        __typename?: "Web3Document";
        id: string;
        sys: {
          __typename?: "SystemInfo";
          filename: string;
          basename: string;
          breadcrumbs: Array<string>;
          path: string;
          relativePath: string;
          extension: string;
        };
        data: {
          __typename?: "Web3";
          image?: string | null;
          title?: string | null;
          richtext?: any | null;
          website?: string | null;
        };
      } | null;
    } | null> | null;
  };
};

export type GetStakingDocumentQueryVariables = Exact<{
  relativePath: Scalars["String"];
}>;

export type GetStakingDocumentQuery = {
  __typename?: "Query";
  getStakingDocument: {
    __typename?: "StakingDocument";
    id: string;
    sys: {
      __typename?: "SystemInfo";
      filename: string;
      basename: string;
      breadcrumbs: Array<string>;
      path: string;
      relativePath: string;
      extension: string;
    };
    data: {
      __typename?: "Staking";
      image?: string | null;
      title?: string | null;
      richtext?: any | null;
      website?: string | null;
      twitter?: string | null;
    };
  };
};

export type GetStakingListQueryVariables = Exact<{ [key: string]: never }>;

export type GetStakingListQuery = {
  __typename?: "Query";
  getStakingList: {
    __typename?: "StakingConnection";
    totalCount: number;
    edges?: Array<{
      __typename?: "StakingConnectionEdges";
      node?: {
        __typename?: "StakingDocument";
        id: string;
        sys: {
          __typename?: "SystemInfo";
          filename: string;
          basename: string;
          breadcrumbs: Array<string>;
          path: string;
          relativePath: string;
          extension: string;
        };
        data: {
          __typename?: "Staking";
          image?: string | null;
          title?: string | null;
          richtext?: any | null;
          website?: string | null;
          twitter?: string | null;
        };
      } | null;
    } | null> | null;
  };
};

export type GetExchangeDocumentQueryVariables = Exact<{
  relativePath: Scalars["String"];
}>;

export type GetExchangeDocumentQuery = {
  __typename?: "Query";
  getExchangeDocument: {
    __typename?: "ExchangeDocument";
    id: string;
    sys: {
      __typename?: "SystemInfo";
      filename: string;
      basename: string;
      breadcrumbs: Array<string>;
      path: string;
      relativePath: string;
      extension: string;
    };
    data: {
      __typename?: "Exchange";
      image?: string | null;
      title?: string | null;
      richtext?: any | null;
      website?: string | null;
      twitter?: string | null;
      telegram?: string | null;
    };
  };
};

export type GetExchangeListQueryVariables = Exact<{ [key: string]: never }>;

export type GetExchangeListQuery = {
  __typename?: "Query";
  getExchangeList: {
    __typename?: "ExchangeConnection";
    totalCount: number;
    edges?: Array<{
      __typename?: "ExchangeConnectionEdges";
      node?: {
        __typename?: "ExchangeDocument";
        id: string;
        sys: {
          __typename?: "SystemInfo";
          filename: string;
          basename: string;
          breadcrumbs: Array<string>;
          path: string;
          relativePath: string;
          extension: string;
        };
        data: {
          __typename?: "Exchange";
          image?: string | null;
          title?: string | null;
          richtext?: any | null;
          website?: string | null;
          twitter?: string | null;
          telegram?: string | null;
        };
      } | null;
    } | null> | null;
  };
};

export type GetComunityDocumentQueryVariables = Exact<{
  relativePath: Scalars["String"];
}>;

export type GetComunityDocumentQuery = {
  __typename?: "Query";
  getComunityDocument: {
    __typename?: "ComunityDocument";
    id: string;
    sys: {
      __typename?: "SystemInfo";
      filename: string;
      basename: string;
      breadcrumbs: Array<string>;
      path: string;
      relativePath: string;
      extension: string;
    };
    data: {
      __typename?: "Comunity";
      image?: string | null;
      title?: string | null;
      richtext?: any | null;
      website?: string | null;
    };
  };
};

export type GetComunityListQueryVariables = Exact<{ [key: string]: never }>;

export type GetComunityListQuery = {
  __typename?: "Query";
  getComunityList: {
    __typename?: "ComunityConnection";
    totalCount: number;
    edges?: Array<{
      __typename?: "ComunityConnectionEdges";
      node?: {
        __typename?: "ComunityDocument";
        id: string;
        sys: {
          __typename?: "SystemInfo";
          filename: string;
          basename: string;
          breadcrumbs: Array<string>;
          path: string;
          relativePath: string;
          extension: string;
        };
        data: {
          __typename?: "Comunity";
          image?: string | null;
          title?: string | null;
          richtext?: any | null;
          website?: string | null;
        };
      } | null;
    } | null> | null;
  };
};

export type GetPagesDocumentQueryVariables = Exact<{
  relativePath: Scalars["String"];
}>;

export type GetPagesDocumentQuery = {
  __typename?: "Query";
  getPagesDocument: {
    __typename?: "PagesDocument";
    id: string;
    sys: {
      __typename?: "SystemInfo";
      filename: string;
      basename: string;
      breadcrumbs: Array<string>;
      path: string;
      relativePath: string;
      extension: string;
    };
    data: {
      __typename?: "Pages";
      title?: string | null;
      updatedAt?: string | null;
      body?: any | null;
    };
  };
};

export type GetPagesListQueryVariables = Exact<{ [key: string]: never }>;

export type GetPagesListQuery = {
  __typename?: "Query";
  getPagesList: {
    __typename?: "PagesConnection";
    totalCount: number;
    edges?: Array<{
      __typename?: "PagesConnectionEdges";
      node?: {
        __typename?: "PagesDocument";
        id: string;
        sys: {
          __typename?: "SystemInfo";
          filename: string;
          basename: string;
          breadcrumbs: Array<string>;
          path: string;
          relativePath: string;
          extension: string;
        };
        data: {
          __typename?: "Pages";
          title?: string | null;
          updatedAt?: string | null;
          body?: any | null;
        };
      } | null;
    } | null> | null;
  };
};

export const PostsPartsFragmentDoc = gql`
  fragment PostsParts on Posts {
    title
    body
  }
`;
export const AppsPartsFragmentDoc = gql`
  fragment AppsParts on Apps {
    image
    title
    richtext
    website
    twitter
    discord
    linkedin
  }
`;
export const VideosPartsFragmentDoc = gql`
  fragment VideosParts on Videos {
    image
    title
    richtext
    website
  }
`;
export const Web3PartsFragmentDoc = gql`
  fragment Web3Parts on Web3 {
    image
    title
    richtext
    website
  }
`;
export const StakingPartsFragmentDoc = gql`
  fragment StakingParts on Staking {
    image
    title
    richtext
    website
    twitter
  }
`;
export const ExchangePartsFragmentDoc = gql`
  fragment ExchangeParts on Exchange {
    image
    title
    richtext
    website
    twitter
    telegram
  }
`;
export const ComunityPartsFragmentDoc = gql`
  fragment ComunityParts on Comunity {
    image
    title
    richtext
    website
  }
`;
export const PagesPartsFragmentDoc = gql`
  fragment PagesParts on Pages {
    title
    updatedAt
    body
  }
`;
export const GetPostsDocumentDocument = gql`
  query getPostsDocument($relativePath: String!) {
    getPostsDocument(relativePath: $relativePath) {
      sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
      data {
        ...PostsParts
      }
    }
  }
  ${PostsPartsFragmentDoc}
`;
export const GetPostsListDocument = gql`
  query getPostsList {
    getPostsList {
      totalCount
      edges {
        node {
          id
          sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          data {
            ...PostsParts
          }
        }
      }
    }
  }
  ${PostsPartsFragmentDoc}
`;
export const GetAppsDocumentDocument = gql`
  query getAppsDocument($relativePath: String!) {
    getAppsDocument(relativePath: $relativePath) {
      sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
      data {
        ...AppsParts
      }
    }
  }
  ${AppsPartsFragmentDoc}
`;
export const GetAppsListDocument = gql`
  query getAppsList {
    getAppsList {
      totalCount
      edges {
        node {
          id
          sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          data {
            ...AppsParts
          }
        }
      }
    }
  }
  ${AppsPartsFragmentDoc}
`;
export const GetVideosDocumentDocument = gql`
  query getVideosDocument($relativePath: String!) {
    getVideosDocument(relativePath: $relativePath) {
      sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
      data {
        ...VideosParts
      }
    }
  }
  ${VideosPartsFragmentDoc}
`;
export const GetVideosListDocument = gql`
  query getVideosList {
    getVideosList {
      totalCount
      edges {
        node {
          id
          sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          data {
            ...VideosParts
          }
        }
      }
    }
  }
  ${VideosPartsFragmentDoc}
`;
export const GetWeb3DocumentDocument = gql`
  query getWeb3Document($relativePath: String!) {
    getWeb3Document(relativePath: $relativePath) {
      sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
      data {
        ...Web3Parts
      }
    }
  }
  ${Web3PartsFragmentDoc}
`;
export const GetWeb3ListDocument = gql`
  query getWeb3List {
    getWeb3List {
      totalCount
      edges {
        node {
          id
          sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          data {
            ...Web3Parts
          }
        }
      }
    }
  }
  ${Web3PartsFragmentDoc}
`;
export const GetStakingDocumentDocument = gql`
  query getStakingDocument($relativePath: String!) {
    getStakingDocument(relativePath: $relativePath) {
      sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
      data {
        ...StakingParts
      }
    }
  }
  ${StakingPartsFragmentDoc}
`;
export const GetStakingListDocument = gql`
  query getStakingList {
    getStakingList {
      totalCount
      edges {
        node {
          id
          sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          data {
            ...StakingParts
          }
        }
      }
    }
  }
  ${StakingPartsFragmentDoc}
`;
export const GetExchangeDocumentDocument = gql`
  query getExchangeDocument($relativePath: String!) {
    getExchangeDocument(relativePath: $relativePath) {
      sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
      data {
        ...ExchangeParts
      }
    }
  }
  ${ExchangePartsFragmentDoc}
`;
export const GetExchangeListDocument = gql`
  query getExchangeList {
    getExchangeList {
      totalCount
      edges {
        node {
          id
          sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          data {
            ...ExchangeParts
          }
        }
      }
    }
  }
  ${ExchangePartsFragmentDoc}
`;
export const GetComunityDocumentDocument = gql`
  query getComunityDocument($relativePath: String!) {
    getComunityDocument(relativePath: $relativePath) {
      sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
      data {
        ...ComunityParts
      }
    }
  }
  ${ComunityPartsFragmentDoc}
`;
export const GetComunityListDocument = gql`
  query getComunityList {
    getComunityList {
      totalCount
      edges {
        node {
          id
          sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          data {
            ...ComunityParts
          }
        }
      }
    }
  }
  ${ComunityPartsFragmentDoc}
`;
export const GetPagesDocumentDocument = gql`
  query getPagesDocument($relativePath: String!) {
    getPagesDocument(relativePath: $relativePath) {
      sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
      data {
        ...PagesParts
      }
    }
  }
  ${PagesPartsFragmentDoc}
`;
export const GetPagesListDocument = gql`
  query getPagesList {
    getPagesList {
      totalCount
      edges {
        node {
          id
          sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          data {
            ...PagesParts
          }
        }
      }
    }
  }
  ${PagesPartsFragmentDoc}
`;
export type Requester<C = {}> = <R, V>(
  doc: DocumentNode,
  vars?: V,
  options?: C
) => Promise<R>;
export function getSdk<C>(requester: Requester<C>) {
  return {
    getPostsDocument(
      variables: GetPostsDocumentQueryVariables,
      options?: C
    ): Promise<{
      data: GetPostsDocumentQuery;
      variables: GetPostsDocumentQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: GetPostsDocumentQuery;
          variables: GetPostsDocumentQueryVariables;
          query: string;
        },
        GetPostsDocumentQueryVariables
      >(GetPostsDocumentDocument, variables, options);
    },
    getPostsList(
      variables?: GetPostsListQueryVariables,
      options?: C
    ): Promise<{
      data: GetPostsListQuery;
      variables: GetPostsListQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: GetPostsListQuery;
          variables: GetPostsListQueryVariables;
          query: string;
        },
        GetPostsListQueryVariables
      >(GetPostsListDocument, variables, options);
    },
    getAppsDocument(
      variables: GetAppsDocumentQueryVariables,
      options?: C
    ): Promise<{
      data: GetAppsDocumentQuery;
      variables: GetAppsDocumentQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: GetAppsDocumentQuery;
          variables: GetAppsDocumentQueryVariables;
          query: string;
        },
        GetAppsDocumentQueryVariables
      >(GetAppsDocumentDocument, variables, options);
    },
    getAppsList(
      variables?: GetAppsListQueryVariables,
      options?: C
    ): Promise<{
      data: GetAppsListQuery;
      variables: GetAppsListQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: GetAppsListQuery;
          variables: GetAppsListQueryVariables;
          query: string;
        },
        GetAppsListQueryVariables
      >(GetAppsListDocument, variables, options);
    },
    getVideosDocument(
      variables: GetVideosDocumentQueryVariables,
      options?: C
    ): Promise<{
      data: GetVideosDocumentQuery;
      variables: GetVideosDocumentQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: GetVideosDocumentQuery;
          variables: GetVideosDocumentQueryVariables;
          query: string;
        },
        GetVideosDocumentQueryVariables
      >(GetVideosDocumentDocument, variables, options);
    },
    getVideosList(
      variables?: GetVideosListQueryVariables,
      options?: C
    ): Promise<{
      data: GetVideosListQuery;
      variables: GetVideosListQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: GetVideosListQuery;
          variables: GetVideosListQueryVariables;
          query: string;
        },
        GetVideosListQueryVariables
      >(GetVideosListDocument, variables, options);
    },
    getWeb3Document(
      variables: GetWeb3DocumentQueryVariables,
      options?: C
    ): Promise<{
      data: GetWeb3DocumentQuery;
      variables: GetWeb3DocumentQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: GetWeb3DocumentQuery;
          variables: GetWeb3DocumentQueryVariables;
          query: string;
        },
        GetWeb3DocumentQueryVariables
      >(GetWeb3DocumentDocument, variables, options);
    },
    getWeb3List(
      variables?: GetWeb3ListQueryVariables,
      options?: C
    ): Promise<{
      data: GetWeb3ListQuery;
      variables: GetWeb3ListQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: GetWeb3ListQuery;
          variables: GetWeb3ListQueryVariables;
          query: string;
        },
        GetWeb3ListQueryVariables
      >(GetWeb3ListDocument, variables, options);
    },
    getStakingDocument(
      variables: GetStakingDocumentQueryVariables,
      options?: C
    ): Promise<{
      data: GetStakingDocumentQuery;
      variables: GetStakingDocumentQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: GetStakingDocumentQuery;
          variables: GetStakingDocumentQueryVariables;
          query: string;
        },
        GetStakingDocumentQueryVariables
      >(GetStakingDocumentDocument, variables, options);
    },
    getStakingList(
      variables?: GetStakingListQueryVariables,
      options?: C
    ): Promise<{
      data: GetStakingListQuery;
      variables: GetStakingListQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: GetStakingListQuery;
          variables: GetStakingListQueryVariables;
          query: string;
        },
        GetStakingListQueryVariables
      >(GetStakingListDocument, variables, options);
    },
    getExchangeDocument(
      variables: GetExchangeDocumentQueryVariables,
      options?: C
    ): Promise<{
      data: GetExchangeDocumentQuery;
      variables: GetExchangeDocumentQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: GetExchangeDocumentQuery;
          variables: GetExchangeDocumentQueryVariables;
          query: string;
        },
        GetExchangeDocumentQueryVariables
      >(GetExchangeDocumentDocument, variables, options);
    },
    getExchangeList(
      variables?: GetExchangeListQueryVariables,
      options?: C
    ): Promise<{
      data: GetExchangeListQuery;
      variables: GetExchangeListQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: GetExchangeListQuery;
          variables: GetExchangeListQueryVariables;
          query: string;
        },
        GetExchangeListQueryVariables
      >(GetExchangeListDocument, variables, options);
    },
    getComunityDocument(
      variables: GetComunityDocumentQueryVariables,
      options?: C
    ): Promise<{
      data: GetComunityDocumentQuery;
      variables: GetComunityDocumentQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: GetComunityDocumentQuery;
          variables: GetComunityDocumentQueryVariables;
          query: string;
        },
        GetComunityDocumentQueryVariables
      >(GetComunityDocumentDocument, variables, options);
    },
    getComunityList(
      variables?: GetComunityListQueryVariables,
      options?: C
    ): Promise<{
      data: GetComunityListQuery;
      variables: GetComunityListQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: GetComunityListQuery;
          variables: GetComunityListQueryVariables;
          query: string;
        },
        GetComunityListQueryVariables
      >(GetComunityListDocument, variables, options);
    },
    getPagesDocument(
      variables: GetPagesDocumentQueryVariables,
      options?: C
    ): Promise<{
      data: GetPagesDocumentQuery;
      variables: GetPagesDocumentQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: GetPagesDocumentQuery;
          variables: GetPagesDocumentQueryVariables;
          query: string;
        },
        GetPagesDocumentQueryVariables
      >(GetPagesDocumentDocument, variables, options);
    },
    getPagesList(
      variables?: GetPagesListQueryVariables,
      options?: C
    ): Promise<{
      data: GetPagesListQuery;
      variables: GetPagesListQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: GetPagesListQuery;
          variables: GetPagesListQueryVariables;
          query: string;
        },
        GetPagesListQueryVariables
      >(GetPagesListDocument, variables, options);
    },
  };
}
export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { staticRequest } from "tinacms";
const requester: (doc: any, vars?: any, options?: any) => Promise<any> = async (
  doc,
  vars,
  _options
) => {
  let data = {};
  try {
    data = await staticRequest({
      query: doc,
      variables: vars,
    });
  } catch (e) {
    // swallow errors related to document creation
    console.warn("Warning: There was an error when fetching data");
    console.warn(e);
  }

  return { data, query: doc, variables: vars || {} };
};

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () => getSdk(requester);
