# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""
References another document, used as a foreign key
"""
scalar Reference

"""

"""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

"""

"""
interface Node {
  id: ID!
}

"""

"""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""
A relay-compliant pagination connection
"""
interface Connection {
  totalCount: Float!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(
    before: String
    after: String
    first: Float
    last: Float
    sort: String
  ): DocumentConnection!
  getDocumentFields: JSON!
  getPostsDocument(relativePath: String): PostsDocument!
  getPostsList(
    before: String
    after: String
    first: Float
    last: Float
    sort: String
  ): PostsConnection!
  getAppsDocument(relativePath: String): AppsDocument!
  getAppsList(
    before: String
    after: String
    first: Float
    last: Float
    sort: String
  ): AppsConnection!
  getVideosDocument(relativePath: String): VideosDocument!
  getVideosList(
    before: String
    after: String
    first: Float
    last: Float
    sort: String
  ): VideosConnection!
  getWeb3Document(relativePath: String): Web3Document!
  getWeb3List(
    before: String
    after: String
    first: Float
    last: Float
    sort: String
  ): Web3Connection!
  getStakingDocument(relativePath: String): StakingDocument!
  getStakingList(
    before: String
    after: String
    first: Float
    last: Float
    sort: String
  ): StakingConnection!
  getExchangeDocument(relativePath: String): ExchangeDocument!
  getExchangeList(
    before: String
    after: String
    first: Float
    last: Float
    sort: String
  ): ExchangeConnection!
  getComunityDocument(relativePath: String): ComunityDocument!
  getComunityList(
    before: String
    after: String
    first: Float
    last: Float
    sort: String
  ): ComunityConnection!
  getPagesDocument(relativePath: String): PagesDocument!
  getPagesList(
    before: String
    after: String
    first: Float
    last: Float
    sort: String
  ): PagesConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(
    before: String
    after: String
    first: Float
    last: Float
    sort: String
  ): DocumentConnection!
}

union DocumentNode =
    PostsDocument
  | AppsDocument
  | VideosDocument
  | Web3Document
  | StakingDocument
  | ExchangeDocument
  | ComunityDocument
  | PagesDocument

type Posts {
  title: String
  body: String
}

type PostsDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Posts!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PostsConnectionEdges {
  cursor: String
  node: PostsDocument
}

type PostsConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [PostsConnectionEdges]
}

type Apps {
  image: String
  title: String
  richtext: JSON
  website: String
  twitter: String
  discord: String
  linkedin: String
}

type AppsDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Apps!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type AppsConnectionEdges {
  cursor: String
  node: AppsDocument
}

type AppsConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [AppsConnectionEdges]
}

type Videos {
  image: String
  title: String
  richtext: JSON
  website: String
}

type VideosDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Videos!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type VideosConnectionEdges {
  cursor: String
  node: VideosDocument
}

type VideosConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [VideosConnectionEdges]
}

type Web3 {
  image: String
  title: String
  richtext: JSON
  website: String
}

type Web3Document implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Web3!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type Web3ConnectionEdges {
  cursor: String
  node: Web3Document
}

type Web3Connection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [Web3ConnectionEdges]
}

type Staking {
  image: String
  title: String
  richtext: JSON
  website: String
  twitter: String
  discord: String
  linkedin: String
}

type StakingDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Staking!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type StakingConnectionEdges {
  cursor: String
  node: StakingDocument
}

type StakingConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [StakingConnectionEdges]
}

type Exchange {
  image: String
  title: String
  richtext: JSON
  website: String
  twitter: String
  discord: String
  linkedin: String
}

type ExchangeDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Exchange!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type ExchangeConnectionEdges {
  cursor: String
  node: ExchangeDocument
}

type ExchangeConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [ExchangeConnectionEdges]
}

type Comunity {
  image: String
  title: String
  richtext: JSON
  website: String
}

type ComunityDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Comunity!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type ComunityConnectionEdges {
  cursor: String
  node: ComunityDocument
}

type ComunityConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [ComunityConnectionEdges]
}

type Pages {
  title: String
  updatedAt: String
  body: JSON
}

type PagesDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Pages!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PagesConnectionEdges {
  cursor: String
  node: PagesDocument
}

type PagesConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [PagesConnectionEdges]
}

type Mutation {
  addPendingDocument(
    collection: String!
    relativePath: String!
    template: String
  ): DocumentNode!
  updateDocument(
    collection: String
    relativePath: String!
    params: DocumentMutation!
  ): DocumentNode!
  createDocument(
    collection: String
    relativePath: String!
    params: DocumentMutation!
  ): DocumentNode!
  updatePostsDocument(
    relativePath: String!
    params: PostsMutation!
  ): PostsDocument!
  createPostsDocument(
    relativePath: String!
    params: PostsMutation!
  ): PostsDocument!
  updateAppsDocument(
    relativePath: String!
    params: AppsMutation!
  ): AppsDocument!
  createAppsDocument(
    relativePath: String!
    params: AppsMutation!
  ): AppsDocument!
  updateVideosDocument(
    relativePath: String!
    params: VideosMutation!
  ): VideosDocument!
  createVideosDocument(
    relativePath: String!
    params: VideosMutation!
  ): VideosDocument!
  updateWeb3Document(
    relativePath: String!
    params: Web3Mutation!
  ): Web3Document!
  createWeb3Document(
    relativePath: String!
    params: Web3Mutation!
  ): Web3Document!
  updateStakingDocument(
    relativePath: String!
    params: StakingMutation!
  ): StakingDocument!
  createStakingDocument(
    relativePath: String!
    params: StakingMutation!
  ): StakingDocument!
  updateExchangeDocument(
    relativePath: String!
    params: ExchangeMutation!
  ): ExchangeDocument!
  createExchangeDocument(
    relativePath: String!
    params: ExchangeMutation!
  ): ExchangeDocument!
  updateComunityDocument(
    relativePath: String!
    params: ComunityMutation!
  ): ComunityDocument!
  createComunityDocument(
    relativePath: String!
    params: ComunityMutation!
  ): ComunityDocument!
  updatePagesDocument(
    relativePath: String!
    params: PagesMutation!
  ): PagesDocument!
  createPagesDocument(
    relativePath: String!
    params: PagesMutation!
  ): PagesDocument!
}

input DocumentMutation {
  posts: PostsMutation
  apps: AppsMutation
  videos: VideosMutation
  web3: Web3Mutation
  staking: StakingMutation
  exchange: ExchangeMutation
  comunity: ComunityMutation
  pages: PagesMutation
}

input PostsMutation {
  title: String
  body: String
}

input AppsMutation {
  image: String
  title: String
  richtext: JSON
  website: String
  twitter: String
  discord: String
  linkedin: String
}

input VideosMutation {
  image: String
  title: String
  richtext: JSON
  website: String
}

input Web3Mutation {
  image: String
  title: String
  richtext: JSON
  website: String
}

input StakingMutation {
  image: String
  title: String
  richtext: JSON
  website: String
  twitter: String
  discord: String
  linkedin: String
}

input ExchangeMutation {
  image: String
  title: String
  richtext: JSON
  website: String
  twitter: String
  discord: String
  linkedin: String
}

input ComunityMutation {
  image: String
  title: String
  richtext: JSON
  website: String
}

input PagesMutation {
  title: String
  updatedAt: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
