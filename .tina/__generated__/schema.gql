# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""
References another document, used as a foreign key
"""
scalar Reference

"""

"""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

"""

"""
interface Node {
  id: ID!
}

"""

"""
interface Document {
  sys: SystemInfo
  id: ID!
  form: JSON!
  values: JSON!
}

"""
A relay-compliant pagination connection
"""
interface Connection {
  totalCount: Float!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(
    before: String
    after: String
    first: Float
    last: Float
    sort: String
  ): DocumentConnection!
  getDocumentFields: JSON!
  getPostsDocument(relativePath: String): PostsDocument!
  getPostsList(
    before: String
    after: String
    first: Float
    last: Float
    sort: String
  ): PostsConnection!
  getPagesDocument(relativePath: String): PagesDocument!
  getPagesList(
    before: String
    after: String
    first: Float
    last: Float
    sort: String
  ): PagesConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(
    before: String
    after: String
    first: Float
    last: Float
    sort: String
  ): DocumentConnection!
}

union DocumentNode = PostsDocument | PagesDocument

type Posts {
  title: String
  body: String
}

type PostsDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Posts!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PostsConnectionEdges {
  cursor: String
  node: PostsDocument
}

type PostsConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [PostsConnectionEdges]
}

type Pages {
  title: String
  updatedAt: String
  body: JSON
}

type PagesDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Pages!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PagesConnectionEdges {
  cursor: String
  node: PagesDocument
}

type PagesConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Float!
  edges: [PagesConnectionEdges]
}

type Mutation {
  addPendingDocument(
    collection: String!
    relativePath: String!
    template: String
  ): DocumentNode!
  updateDocument(
    collection: String
    relativePath: String!
    params: DocumentMutation!
  ): DocumentNode!
  createDocument(
    collection: String
    relativePath: String!
    params: DocumentMutation!
  ): DocumentNode!
  updatePostsDocument(
    relativePath: String!
    params: PostsMutation!
  ): PostsDocument!
  createPostsDocument(
    relativePath: String!
    params: PostsMutation!
  ): PostsDocument!
  updatePagesDocument(
    relativePath: String!
    params: PagesMutation!
  ): PagesDocument!
  createPagesDocument(
    relativePath: String!
    params: PagesMutation!
  ): PagesDocument!
}

input DocumentMutation {
  posts: PostsMutation
  pages: PagesMutation
}

input PostsMutation {
  title: String
  body: String
}

input PagesMutation {
  title: String
  updatedAt: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
